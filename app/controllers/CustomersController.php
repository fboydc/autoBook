<?php

use Phalcon\Paginator\Adapter\Model as Paginator;
class CustomersController extends ControllerBase
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        $owners = Owners::find();

        $this->view->owners = $owners;
    }



    public function createAction()
    {
        $form = new NewcustomerForm();


        if($this->request->isPost())
        {
            $owner = new Owners();
            if($form->isValid($this->request->getPost(), $owner))
            {
                $owner->first = $this->request->getPost('first');
                $owner->last = $this->request->getPost('last');
                $owner->address1 = $this->request->getPost('address1');
                $owner->address2 = $this->request->getPost('address2');
                $owner->phonenum = $this->request->getPost('phonenum');
                $owner->email = $this->request->getPost('email');
                $owner->ssn = $this->request->getPost('ssn');

                if($owner->save()){

                    $form->clear();

                    $this->flash->success("Customer created.");

                    return $this->dispatcher->forward([
                        "controller" => "customers",
                        "action"    =>  "index"
                    ]);

                }else{
                    foreach($owner->getMessages() as $message){
                        $this->flash->error($message);
                    }

                    $this->view->form = new NewcustomerForm();

                    return $this->dispatcher->forward([
                        "controller" => "customers",
                        "action"    =>  "index"
                    ]);

                }


            }else{
                foreach($form->getMessages() as $message)
                {
                    $this->flash->error($message);
                }
            }

        }

        $this->view->form = $form;
    }


    public function saveAction()
    {
        if(!$this->request->isPost())
        {
            return $this->dispatcher->forward([
                "controller"    =>  "customer",
                "action"    =>  "index"
            ]);
        }

        $id = $this->request->getPost('id', 'int');
        $owner = Owners::findFirst($id);
        if(!$owner)
        {
            $this->flash->error("Owner is non-existant");

            return $this->dispatcher->forward([
               "controller" => "owners",
                "action"    => "index"
            ]);
        }

        $form = new NewcustomerForm();

        $data = $this->request->getPost();
        if(!$form->isValid($data, $owner)){
            foreach($form->getMessages() as $message){
                $this->flash->error($message);
            }

            return $this->dispatcher->forward([
                "controller"    =>  "customers",
                "action"    =>  "edit"
            ]);
        }

        if($owner->save() == false)
        {
            foreach($owner->getMessages() as $message)
            {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward([
                "controller"    => "customers",
                "action"    =>  "edit"
            ]);
        }

        $form->clear();

        $this->flash->success("Customer updated succesfully");

        return $this->dispatcher->forward([
            "controller"    =>  "customers",
            "action"    =>  "index"
        ]);
    }



    public function deleteAction($id)
    {
        $owner = Owners::findFirst($id);

        if(!$owner)
        {
            $this->flash->error("Customer was not found");

            return $this->dispatcher->forward([
                "controller"    =>  "customers",
                "action"    =>  "index"
            ]);
        }

        if(!$owner->delete())
        {
            foreach($owner->getMessage() as $message)
            {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward([
                "controller"    =>  "customers",
                "action"    =>  "index"
            ]);
        }

        $this->flash->success("Company deleted succesfully");

        return $this->dispatcher->forward([
            "controller"    =>  "customers",
            "action"
        ]);
    }


    public function editAction($id)
    {
        if(!$this->request->isPost())
        {
            $owner = Owners::findFirst($id);
            if(!$owner)
            {
                $this->flash->error("Customer was not found");

                return $this->dispatcher->forward([
                    "controller"    =>  "customers",
                    "action"    =>  "index"
                ]);
            }

            $this->view->form = new NewcustomerForm($owner, array('edit' =>  true));

        }
    }





}